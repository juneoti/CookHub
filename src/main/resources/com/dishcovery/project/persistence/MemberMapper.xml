<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dishcovery.project.persistence.MemberMapper">
    <resultMap id="MemberResultMap" type="com.dishcovery.project.domain.MemberVO">
        <id property="memberId" column="MEMBER_ID"/>
        <result property="email" column="EMAIL"/>
        <result property="password" column="PASSWORD"/>
        <result property="name" column="NAME"/>
        <result property="phone" column="PHONE_NUMBER"/>
        <result property="createdAt" column="CREATED_AT"/>
        <result property="updatedAt" column="UPDATED_AT"/>
        <result property="authStatus" column="AUTH_STATUS"/>
    </resultMap>

    <resultMap id="MemberRoleResultMap" type="com.dishcovery.project.domain.MemberRole">
        <id property="roleId" column="ROLE_ID"/>
        <result property="memberId" column="MEMBER_ID"/>
        <result property="roleName" column="ROLE_NAME"/>
    </resultMap>

    <resultMap id="MemberAuthResultMap" type="com.dishcovery.project.domain.MemberAuth">
        <id property="authId" column="AUTH_ID"/>
        <result property="memberId" column="MEMBER_ID"/>
        <result property="authKey" column="AUTH_KEY"/>
        <result property="createdAt" column="CREATED_AT"/>
        <result property="expiresAt" column="EXPIRES_AT"/>
        <result property="expiresFlag" column="EXPIRES_FLAG"/>
    </resultMap>

    <!-- 회원 가입 -->
    <insert id="insert">
        INSERT INTO MEMBER (MEMBER_ID, EMAIL, PASSWORD, NAME, PHONE_NUMBER)
        VALUES (MEMBER_SEQ.nextval, #{email}, #{password}, #{name}, #{phone})
    </insert>

    <!-- 회원 권한 등록 -->
    <insert id="insertMemberRole">
        INSERT INTO MEMBER_ROLE (ROLE_ID, MEMBER_ID)
        VALUES (MEMBER_ROLE_SEQ.nextval, (SELECT MEMBER_ID
                                          FROM MEMBER
                                          WHERE EMAIL = #{email}))
    </insert>

    <!-- 이메일 중복 체크 -->
    <select id="selectDupCheckEmail" resultMap="MemberResultMap">
        SELECT *
        FROM MEMBER
        WHERE EMAIL = #{email}
    </select>

    <!-- 이메일 인증 확인 -->
    <update id="updateExpiresFlag" parameterType="java.util.Map">
        UPDATE MEMBER_AUTH
        SET EXPIRES_FLAG = CASE
            WHEN EXPIRES_FLAG = 0 THEN 1
            ELSE EXPIRES_FLAG
        END
        WHERE MEMBER_ID = (SELECT MEMBER_ID
                           FROM MEMBER
                           WHERE EMAIL = #{email})
        AND EXPIRES_AT > SYSDATE
    </update>

    <!-- 이메일 인증 후 로그인 권한 부여 -->
    <update id="updateAuthStatus" parameterType="java.util.Map">
        UPDATE MEMBER
        SET AUTH_STATUS = 1
        WHERE EMAIL = #{email}
    </update>

    <!-- 임시 비밀번호 변경 -->
    <update id="updateTempPw" parameterType="java.util.Map">
        UPDATE MEMBER
        SET PASSWORD   = #{tempPw},
            UPDATED_AT = sysdate
        WHERE EMAIL = #{email}
    </update>

    <!-- 회원 정보 변경 -->
    <update id="updateMember">
        UPDATE MEMBER
        SET PASSWORD     = #{password},
            NAME         = #{name},
            PHONE_NUMBER = #{phone},
            UPDATED_AT   = sysdate
        WHERE EMAIL = #{email}
    </update>

    <!-- 로그인 가능 유저 확인 -->
    <select id="selectEmail" resultMap="MemberResultMap">
        SELECT *
        FROM MEMBER
        WHERE EMAIL = #{email}
          AND AUTH_STATUS = 1
    </select>

    <select id="selectMemberId" resultMap="MemberResultMap">
        SELECT *
        FROM MEMBER
        WHERE MEMBER_ID = #{memberId}
    </select>

    <!-- 유저 여부 확인 -->
    <select id="checkUser" resultMap="MemberResultMap">
        SELECT *
        FROM MEMBER
        WHERE EMAIL = #{email}
    </select>

    <!-- 회원 권환 확인 -->
    <select id="selectRoleByMemberId" resultMap="MemberRoleResultMap">
        SELECT *
        FROM MEMBER_ROLE
        WHERE MEMBER_ID = #{memberId}
    </select>

    <insert id="insertMemberAuthKey">
        INSERT INTO MEMBER_AUTH (AUTH_ID, MEMBER_ID, AUTH_KEY, CREATED_AT, EXPIRES_AT)
        VALUES (MEMBER_AUTH_SEQ.nextval, (SELECT MEMBER_ID
                                          FROM MEMBER
                                          WHERE EMAIL = #{email}), #{authKey}, sysdate, #{expiresAt})
    </insert>

    <delete id="deleteAuthKey">
        DELETE FROM MEMBER_AUTH
        WHERE MEMBER_ID = (SELECT MEMBER_ID
                           FROM MEMBER
                           WHERE EMAIL = #{email})
    </delete>

    <delete id="deleteMember">
        DELETE FROM MEMBER
        WHERE EMAIL = #{email}
    </delete>

    <delete id="deleteMemberRole">
        DELETE FROM MEMBER_ROLE
        WHERE MEMBER_ID = (SELECT MEMBER_ID
                           FROM MEMBER
                           WHERE EMAIL = #{email})
    </delete>

    <select id="checkAuth" resultMap="MemberAuthResultMap">
        SELECT *
        FROM MEMBER_AUTH
        WHERE MEMBER_ID = (SELECT MEMBER_ID
                           FROM MEMBER
                           WHERE EMAIL = #{email})
    </select>

    <update id="updateAuthKey">
        UPDATE MEMBER_AUTH
        SET AUTH_KEY = #{authKey},
            EXPIRES_AT = #{expiresAt}
        WHERE MEMBER_ID = (SELECT MEMBER_ID
                           FROM MEMBER
                           WHERE EMAIL = #{email})
    </update>
</mapper>