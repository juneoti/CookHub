<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dishcovery.project.persistence.RecipeRankingMapper">

    <!-- 기존 resultMap을 수정하여 totalScore 포함 -->
    <resultMap id="RankingResultMap" type="com.dishcovery.project.domain.RecipeRankingVO">
        <result property="rankPosition" column="RANK_POSITION"/>
        <result property="recipeBoardId" column="RECIPE_BOARD_ID"/>
        <result property="viewCount" column="VIEW_COUNT"/>
        <result property="totalScore" column="TOTAL_SCORE"/>  <!-- ✅ totalScore 매핑 추가 -->
    </resultMap>

    <!-- 특정 유형의 랭킹 데이터를 가져오는 쿼리 -->
	<select id="getRankings" resultMap="RankingResultMap">
    <![CDATA[
    SELECT recipe_board_id, rank_position, view_count
    FROM RECIPE_RANKINGS
    WHERE rank_type = #{rankType}
    AND rank_position BETWEEN 1 AND 10
    ORDER BY rank_position ASC
    ]]>
	</select>

    <!-- ✅ totalScore 포함된 total 랭킹 데이터 가져오는 쿼리 -->
	<select id="getTotalRankings" resultMap="RankingResultMap">
	  <![CDATA[
	    SELECT 
	        rb.recipe_board_id, 
	        rb.recipe_board_title, 
	        rb.thumbnail_path, 
	        rr.view_count AS viewCount,  -- ✅ RECIPE_RANKINGS 테이블의 VIEW_COUNT 사용
	        rb.avg_rating, 
	        rb.like_count,
	        COALESCE((
	            (LN(1 + rr.view_count) * 
	            CASE 
	                WHEN #{rankType} = 'daily' THEN 2 
	                WHEN #{rankType} = 'weekly' THEN 1.5 
	                ELSE 1 
	            END) + 
	            (rb.avg_rating * 10) + 
	            (LN(1 + rb.like_count) * 5)
	        ), 0.0) AS total_score  -- ✅ NULL 값 방지 (COALESCE 사용)
	    FROM recipe_board rb
	    JOIN recipe_rankings rr 
	        ON rb.recipe_board_id = rr.recipe_board_id
	        AND rr.rank_type = 
	            CASE 
	                WHEN #{rankType} = 'daily' THEN 'DAILY'
	                WHEN #{rankType} = 'weekly' THEN 'WEEKLY'
	                ELSE 'MONTHLY'
	            END  -- ✅ rank_type 조건 추가
	    ORDER BY total_score DESC
	  ]]>
	</select>

    <!-- 특정 유형의 기존 랭킹 데이터를 삭제 -->
    <delete id="deleteRankingsByType">
        DELETE FROM RECIPE_RANKINGS WHERE RANK_TYPE = #{rankType}
    </delete>

    <!-- 랭킹 데이터를 삽입 -->
    <insert id="insertRankings" parameterType="map">
        INSERT INTO RECIPE_RANKINGS (
            RANK_ID, RANK_POSITION, RECIPE_BOARD_ID, VIEW_COUNT, RANK_TYPE, UPDATED_DATE
        )
        VALUES (
            RECIPE_RANKINGS_SEQ.NEXTVAL,
            #{rank.rankPosition},
            #{rank.recipeBoardId},
            #{rank.viewCount},
            #{rank.rankType},
            SYSDATE
        )
    </insert>

    <update id="reorderRankPositions">
		UPDATE recipe_rankings r
		SET r.rank_position = (
    	SELECT new_rank_position
    	FROM (
        	SELECT 
            	ROW_NUMBER() OVER (PARTITION BY rank_type ORDER BY view_count DESC) AS new_rank_position,
            	rank_id,
            	rank_type  -- ✅ `rank_type`을 서브쿼리에서 포함
        	FROM recipe_rankings
    	) rd
    	WHERE rd.rank_id = r.rank_id AND rd.rank_type = r.rank_type -- ✅ rank_type 조건 추가
	)
    </update>
    
    
    
</mapper>
